generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date       DateTime @db.Timestamp(6)
  end_date         DateTime @db.Timestamp(6)
  user_id          String   @db.Uuid
  car_id           String   @db.Uuid
  pickup_location  String?  @db.VarChar(255)
  dropoff_location String?  @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  car              car      @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model car {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make            String       @db.VarChar(255)
  model           String       @db.VarChar(255)
  year            Int
  color           String       @db.VarChar(255)
  mileage         Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  booking         booking[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model employee {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String       @db.VarChar(255)
  last_name       String       @db.VarChar(255)
  position        String       @db.VarChar(255)
  organization_id String       @db.Uuid
  hire_date       DateTime?    @db.Timestamp(6)
  salary          Int?
  user_id         String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  city        String?    @db.VarChar(255)
  state       String?    @db.VarChar(255)
  zip_code    String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  car         car[]
  employee    employee[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  booking      booking[]
  employee     employee[]
  organization organization[]
}
